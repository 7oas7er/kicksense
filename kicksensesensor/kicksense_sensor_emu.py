# This little programm emulates sensor data generated by the RaspberriPi with the SenseHat board.

import argparse
import http.client as httplib, sys, time, math, json, random
import datetime

PROTOCOL_PREFIX_HTTPS = 'https://'
PROTOCOL_PREFIX_HTTP = 'http://'
DEFAULT_KICKSENSE_SERVER_URI = 'stormy-woodland-9591.herokuapp.com'
DEFAULT_PORT = '80'
MOVEEVENT = 'moveevent'

uri = ''
port = ''
# id="kicker1"

headers = {}
headers['Content-Type'] = 'application/json'
headers['User-Agent'] = 'Kicker Rasperry Pi-Emulator'
headers['Accept'] = '*/*'


class KickSenseServer:
    uri = DEFAULT_KICKSENSE_SERVER_URI
    port = DEFAULT_PORT

    def getUrl(self):
        return self.uri + ':' + self.port

class MoveEvent:
    timestamp = ''
    x = ''
    y = ''
    z = ''

    def __str__(self):
        return "timestamp: " + str(self.timestamp) + " x: " + str(self.x) + " y:" + str(self.y) + " z:" + str(self.z)



def readConsoleArgs():
    kickSenseServer = KickSenseServer()
    parser = argparse.ArgumentParser(description='Continously send test move events to a given KickSense server')
    parser.add_argument('--uri', metavar='uri', type=str, nargs='?', help='The URL of a KickSense server to send move events to. If no url is provided, the defaul ' + DEFAULT_KICKSENSE_SERVER_URI + ' is used.')
    parser.add_argument('--port', metavar='port', type=str, nargs='?', help='The http port of a KickSense server to send move events to. If no port is provided, the defaul ' + DEFAULT_PORT + ' is used.')
    args = parser.parse_args()
    if args.uri is not None:
        kickSenseServer.uri = args.uri
    if args.port is not None:
        kickSenseServer.port = args.port
    return kickSenseServer

def openConnection(kickSenseServer):
    print("Opening a conniction to " + kickSenseServer.uri + ":" + kickSenseServer.port + "...")
    conn = httplib.HTTPConnection(kickSenseServer.uri, kickSenseServer.port)
    conn.connect()
    conn.debuglevel = 1
    return conn


def getValues():
    moveEvent = MoveEvent()
    now = datetime.datetime.now()
    print("now " + str(now))
    timetuple = now.timetuple()
    print("timetuple " + str(timetuple))
    moveEvent.timestamp = time.mktime(timetuple)*1000
    print("timestamp " + str(moveEvent.timestamp))
    moveEvent.x = random.random()
    moveEvent.y = random.random()
    moveEvent.z = random.random()
    return moveEvent

def createRestUrl():
    return PROTOCOL_PREFIX_HTTP + server.getUrl() + '/' + MOVEEVENT + '/'


server = readConsoleArgs()
conn = openConnection(server)

# here is where the shit gets real
while True:
    moveEvent = getValues()
    print("created move event " + str(moveEvent))
    time.sleep(1)
    body={"timestamp":str(moveEvent.timestamp),"x":str(moveEvent.x),"y":str(moveEvent.y),"z":str(moveEvent.z)}
    try:
        print ("Try to send POST as json: ", json.dumps(body) + " to " + createRestUrl())
        request = conn.request('POST', '/' + MOVEEVENT + '/', json.dumps(body), headers)
        print ("posted, response is: : ")
        reply = conn.getresponse()
        print (reply.read())
    except:
        e = sys.exc_info()[0]
        print('Oh, something went wrong: {}', e)
        conn = openConnection(server)
